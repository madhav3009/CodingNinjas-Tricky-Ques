Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :
false



#include <iostream>
#include<queue>

using namespace std;


bool hasPath(int **edges, int V, int start, int end)
{
    if(start==end)
        return true;
    
    
    bool * visited= new bool[V];
    for(int i=0;i<V;i++)
        visited[i]=false;
    
    queue<int> pendingVertices;
    pendingVertices.push(start);
    visited[start]=true;
    
    while(!pendingVertices.empty())
    {
        
        int currV=pendingVertices.front();
        pendingVertices.pop();
        
        for(int i=0;i<V;i++)
        {
            if(currV==end)
                return true;
            
            if(edges[currV][i]==1 && !visited[i])
            {
                pendingVertices.push(i);
                visited[i]=true;
            }
        }
        
    }
    
    
    
}

int main() {
    int V, E;
    cin >> V >> E;

    
    int ** edges = new int *[V];
    for(int i=0;i<V;i++)
 
    {
    edges[i]=new int[V];
    for(int j=0;j<V;j++)
    edges[i][j]=0;
   }
    
    for(int i=0;i<E;i++)
    {
        int a,b;
        cin>>a>>b;
        edges[a][b]=1;
        edges[b][a]=1;
    }
    
    int v1,v2;
    cin>>v1>>v2;
    
    bool ans= hasPath(edges,V,v1,v2);
    if(ans)
        cout<<"true";
    else
        cout<<"false";
    
  
  return 0;
}
