#include <iostream>
#include<queue>
using namespace std;

template<typename T>

class BinaryTreeNode{
public:
    T data;
    BinaryTreeNode * left;
    BinaryTreeNode * right;

 BinaryTreeNode(T data)
  {

     this->data=data;
     this->left=NULL;
     this->right=NULL;
  }
 };


BinaryTreeNode<int> * takeInputLevelWise()
{

    int rootData;
    cout<<"Enter Data";
    cin>>rootData;

    BinaryTreeNode<int> * root = new BinaryTreeNode<int>(rootData);

    queue<BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);


    while(!pendingNodes.empty())
    {

        BinaryTreeNode<int> * Front= pendingNodes.front();
        pendingNodes.pop();

        cout<<"Enter left Child of "<<Front->data;
        int leftChildData;
        cin>>leftChildData;

        if(leftChildData!=-1)
        {
            BinaryTreeNode<int>* LChild= new BinaryTreeNode<int>(leftChildData);
            pendingNodes.push(LChild);
            Front->left=LChild;

        }

          cout<<"Enter right Child of "<<Front->data;
          int rightChildData;
          cin>>rightChildData;

        if(rightChildData!=-1)
        {
            BinaryTreeNode<int>* RChild= new BinaryTreeNode<int>(rightChildData);
            pendingNodes.push(RChild);
            Front->right=RChild;

        }
    }

    return root;
}



 void printBinaryTree(BinaryTreeNode<int> * root)
 {

     if(root==NULL)
        return;

     queue<BinaryTreeNode<int> *> pendingNodes;
     pendingNodes.push(root);
     while(!pendingNodes.empty())
     {
         BinaryTreeNode<int>* Front= pendingNodes.front();
         pendingNodes.pop();

         cout<<Front->data<<":";
         cout<<"L:";

         if(Front->left)
         {
             pendingNodes.push(Front->left);
             cout<<Front->left->data<<",";
         }
         else{
            cout<<"-1"<<",";
         }

         cout<<"R:";

         if(Front->right)
         {
             pendingNodes.push(Front->right);
             cout<<Front->right->data<<endl;
         }
         else{
            cout<<"-1"<<endl;
         }

     }


 }

int main()
{
   BinaryTreeNode<int> * root = takeInputLevelWise();
   printBinaryTree(root);

    return 0;
}
