Input format :

Elements in level order form (separated by space)

(If any node does not have left or right child, take -1 in its place)

Output Format :

Elements are printed level wise, each level in new line (separated by space).

Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output :
5
10 6
2 3
9



// Following is the Binary Tree node structure
/**************
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
};

***************/
#include<stack>
void zigZagOrder(BinaryTreeNode<int> *root) {
    
   stack<BinaryTreeNode<int>*> s1;  
   stack<BinaryTreeNode<int>*> s2;
    
    int CLR=1,NLC=0;
    bool flag=true;
    
    s1.push(root);
    
    while(!s1.empty() || !s2.empty() )
    {
     
        if(flag)
        {
             BinaryTreeNode<int> * T = s1.top();
             s1.pop();
            
             cout<<T->data<<" ";
            
             if(T->left!=NULL)
              {
                s2.push(T->left);
                NLC++;
              }
            
              if(T->right!=NULL)
              {
                s2.push(T->right);
                NLC++;
              }
            
              CLR--;
              if(CLR==0)
               {
                cout<<endl;
                CLR=NLC;
                NLC=0;
                flag=false;
                }
            }
        
      else
      {
          BinaryTreeNode<int> * T = s2.top();
             s2.pop();
            
             cout<<T->data<<" ";
            
             if(T->right)
              {
                s1.push(T->right);
                NLC++;
              }
            
              if(T->left)
              {
                s1.push(T->left);
                NLC++;
              }
            
              CLR--;
              if(CLR==0)
               {
                cout<<endl;
                CLR=NLC;
                NLC=0;
                flag=true;
                }
        
          
          
          
      }
        
    }
    
}
